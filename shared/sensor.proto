syntax = "proto3";
option go_package = "github.com/argoproj/argo-events/shared";

package shared;

import "github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1/generated.proto";
import "google/protobuf/empty.proto";

// Signal enables communication between signal plugins and the sensor controller.
service Signal {
    // Start listening. Events are streamed back to the client.
    rpc Start(github.com.argoproj.argo_events.pkg.apis.sensor.v1alpha1.Signal) returns (stream github.com.argoproj.argo_events.pkg.apis.sensor.v1alpha1.Event);

    // Stop listening. This should terminate the above event stream.
    rpc Stop(google.protobuf.Empty) returns (google.protobuf.Empty);
}

// TriggerRequest contains the trigger and the corresponding dependent event(s)
message TriggerRequest {
    github.com.argoproj.argo_events.pkg.apis.sensor.v1alpha1.Trigger trigger = 1;
    repeated github.com.argoproj.argo_events.pkg.apis.sensor.v1alpha1.Event events = 2;
}

// Trigger enables communication between trigger plugins and the sensor controller.
service Trigger {
    rpc Fire(TriggerRequest) returns (google.protobuf.Empty);
}